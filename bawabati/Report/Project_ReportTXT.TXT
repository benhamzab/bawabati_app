# Rapport sur le Système de Gestion Scolaire Bawabati

## 1. Aperçu du Projet

### Nom et Objectif
**Bawabati** est un système complet de gestion scolaire conçu pour simplifier les processus d'administration éducative. La plateforme facilite l'interaction entre administrateurs, enseignants et étudiants via une interface web unifiée, permettant la gestion des cours, le partage de contenu et l'inscription des étudiants.

### Technologies Utilisées
- **Backend** : Python 3.11, Django 5.2
- **Frontend** : HTML5, CSS3, JavaScript
- **Framework UI** : Bootstrap 5
- **Traitement de Formulaires** : Crispy Forms avec Bootstrap5
- **Base de Données** : MySQL
- **Outils de Développement** : Django Debug Toolbar
- **Authentification** : Système d'authentification intégré de Django

### Structure des Dossiers
```
educational_system/bawabati/
├── bawabati/ (Paramètres du projet)
│   ├── settings.py (Configuration)
│   ├── urls.py (Routage principal des URL)
│   └── wsgi.py (Configuration WSGI)
├── bawabati_app/ (Application principale)
│   ├── migrations/ (Migrations de base de données)
│   ├── templates/ (Modèles HTML)
│   │   └── bawabati_app/ (Modèles spécifiques à l'application)
│   ├── models.py (Modèles de données)
│   ├── views.py (Fonctions/classes de vue)
│   ├── urls.py (Routage URL)
│   ├── forms.py (Définitions de formulaires)
│   └── signals.py (Signaux Django)
├── students/ (Application spécifique aux étudiants)
├── teachers/ (Application spécifique aux enseignants)
├── courses/ (Application de gestion des cours)
├── grades/ (Application de gestion des notes)
└── manage.py (Utilitaire en ligne de commande Django)
```

## 2. Rôles Utilisateurs & Accès

### Rôle : Administrateur
**Fonctions :**
- Gestion des utilisateurs (créer, consulter, modifier, supprimer)
- Gestion des cours (créer, assigner des enseignants, surveiller)
- Supervision et administration globale du système
- Attribution des rôles et gestion des permissions

**Vues :**
- Tableau de bord administrateur avec statistiques système
- Interface de gestion des utilisateurs
- Création et gestion des cours
- Options de configuration du système

### Rôle : Enseignant
**Fonctions :**
- Créer et gérer les cours assignés
- Télécharger des matériels de cours (notes)
- Voir les étudiants inscrits
- Gérer le contenu des cours

**Vues :**
- Tableau de bord enseignant affichant les cours assignés
- Vue détaillée des cours avec liste d'étudiants
- Interface de téléchargement de notes
- Gestion de profil

### Rôle : Étudiant
**Fonctions :**
- S'inscrire aux cours disponibles
- Consulter les matériels de cours
- Télécharger les notes
- Consulter les informations personnelles d'inscription

**Vues :**
- Tableau de bord étudiant affichant les cours inscrits
- Interface de navigation des cours
- Vue détaillée des cours avec matériels
- Gestion de profil

## 3. Fonctionnalités Principales

### Authentification
- **Connexion/Inscription** : Implémentation personnalisée avec champs basés sur les rôles
- **Redirection basée sur les rôles** : Après connexion, les utilisateurs sont dirigés vers des tableaux de bord spécifiques à leur rôle
- **Gestion des mots de passe** : Traitement sécurisé et fonctionnalité de réinitialisation
- **Gestion de profil** : Les utilisateurs peuvent mettre à jour leurs informations

### Gestion des Cours
- **Création de cours** : Les administrateurs et enseignants peuvent créer de nouveaux cours
- **Attribution de cours** : Les administrateurs peuvent assigner des enseignants aux cours
- **Modification de cours** : Mise à jour des détails incluant titre, description et attribution d'enseignant
- **Liste des cours** : Vues filtrées selon les rôles utilisateurs

### Téléchargement/Téléversement de Notes
- **Stockage sécurisé de fichiers** : Stockage côté serveur des matériels éducatifs
- **Restriction de type de fichier** : Le système valide les types de fichiers pour la sécurité
- **Stockage de métadonnées** : Les notes incluent date de téléchargement, informations sur l'auteur et description
- **Accès contrôlé** : Les étudiants peuvent uniquement télécharger les notes des cours auxquels ils sont inscrits

### Système d'Inscription
- **Auto-inscription** : Les étudiants peuvent s'inscrire eux-mêmes aux cours disponibles
- **Gestion des inscriptions** : Les enseignants et administrateurs peuvent voir les étudiants inscrits
- **Statistiques d'inscription** : Le tableau de bord affiche les métriques d'inscription
- **Restrictions d'inscription** : La logique métier définit les règles d'inscription

## 4. Modèles de Base de Données

### UserProfile
- **Extension du modèle User de Django** (OneToOneField)
- **Champs** :
  - `user` : OneToOneField vers le modèle User de Django
  - `role` : CharField avec choix ('étudiant', 'enseignant', 'admin')
  - `profile_picture` : ImageField pour les avatars utilisateurs
  - `bio` : TextField pour la description de l'utilisateur
- **Relations** : Connecté au modèle User via relation OneToOne

### Course
- **Unité éducative centrale du système**
- **Champs** :
  - `title` : CharField pour le nom du cours
  - `code` : CharField pour le code unique du cours
  - `description` : TextField pour les détails du cours
  - `assigned_teacher` : ForeignKey vers le modèle User
  - `created_at` : DateTimeField (ajout automatique)
- **Relations** : 
  - Connecté à User (enseignant) via ForeignKey
  - Référencé par les modèles Note et Enrollment

### Note
- **Matériels éducatifs attachés aux cours**
- **Champs** :
  - `title` : CharField pour le titre de la note
  - `course` : ForeignKey vers le modèle Course
  - `file` : FileField pour le document réel
  - `uploaded_by` : ForeignKey vers le modèle User
  - `upload_date` : DateTimeField (ajout automatique)
  - `description` : TextField (optionnel)
- **Relations** : Connecté aux modèles Course et User via ForeignKeys

### Enrollment
- **Lie les étudiants aux cours**
- **Champs** :
  - `student` : ForeignKey vers le modèle User
  - `course` : ForeignKey vers le modèle Course
  - `enrollment_date` : DateTimeField (ajout automatique)
  - `status` : CharField avec choix ('actif', 'terminé', 'abandonné')
- **Relations** : Connecté aux modèles User (étudiant) et Course via ForeignKeys

## 5. Routage & Vues

### Modèles d'URL Principaux
- `/` : Page d'accueil / tableau de bord (spécifique au rôle)
- `/login/` : Page de connexion
- `/logout/` : Point de terminaison de déconnexion
- `/register/` : Inscription utilisateur
- `/profile/` : Gestion du profil utilisateur
- `/users/` : Gestion des utilisateurs (admin uniquement)
- `/courses/` : Liste des cours
- `/courses/<id>/` : Détails du cours
- `/courses/add/` : Création de cours
- `/courses/<id>/edit/` : Modification de cours
- `/courses/<id>/delete/` : Suppression de cours
- `/courses/<id>/enroll/` : Point de terminaison d'inscription au cours
- `/notes/add/` : Téléversement de note

### Types de Vues
L'application utilise principalement des **vues basées sur des fonctions** avec des décorateurs pour la gestion des permissions, bien que certaines vues plus complexes utilisent des **vues basées sur des classes** pour des fonctionnalités comme la gestion de formulaires et les opérations CRUD.

Les modèles de vue notables incluent :
- Redirection de tableau de bord basée sur les rôles
- Vues décorées par permissions pour les fonctionnalités admin
- Gestion de formulaires pour les profils et la gestion des cours
- Vues détaillées avec contenu dépendant du contexte

## 6. Templates & Interface Utilisateur

### Structure des Templates
```
templates/
└── bawabati_app/
    ├── base.html (Template de base avec éléments communs)
    ├── login.html (Authentification)
    ├── register.html (Inscription utilisateur)
    ├── dashboard/
    │   ├── admin_dashboard.html
    │   ├── teacher_dashboard.html
    │   └── student_dashboard.html
    ├── course_list.html (Liste des cours)
    ├── course_detail.html (Détails du cours)
    ├── course_form.html (Création/modification de cours)
    ├── note_form.html (Téléversement de note)
    ├── user_list.html (Gestion des utilisateurs)
    └── profile.html (Gestion du profil)
```

### Utilisation des Templates Basée sur les Rôles
Le système utilise le rendu conditionnel dans les templates et des templates de tableau de bord séparés pour différents rôles utilisateurs. L'héritage de template est utilisé avec `base.html` fournissant la structure commune.

### Framework UI
- **Bootstrap 5** : Framework UI principal pour la conception responsive
- **Crispy Forms** : Rendu amélioré des formulaires
- **FontAwesome** : Bibliothèque d'icônes
- **CSS personnalisé** : Style supplémentaire pour des composants spécifiques

## 7. Sécurité & Bonnes Pratiques

### Permissions Basées sur les Rôles
- **Vérifications au niveau des vues** : Fonctions pour vérifier les rôles utilisateurs avant d'autoriser l'accès
- **Conditionnels de template** : Éléments UI affichés/masqués selon le rôle utilisateur
- **Protection des URL** : URL administratives protégées contre les accès non autorisés
- **Validation de formulaire** : Validation côté serveur des soumissions de formulaires

### Login Requis
- Décorateur `@login_required` appliqué aux vues sécurisées
- Redirection automatique vers la page de connexion pour les utilisateurs non authentifiés
- Gestion de session pour une authentification persistante

### Sécurité des Téléversements de Fichiers
- **Validation de type de fichier** : Vérifications sur les fichiers de notes téléversés
- **Limitations de taille** : Empêche les téléversements excessivement volumineux
- **Contrôles d'accès** : Les étudiants peuvent uniquement accéder aux notes des cours auxquels ils sont inscrits
- **Sécurité de stockage** : Fichiers stockés dans des répertoires protégés

## 8. Améliorations Futures

### Fonctionnalités à Ajouter
1. **Système de Notation** : Suivi et reporting complets des notes
2. **Suivi de Présence** : Gestion numérique des présences
3. **Système de Messagerie** : Communication in-app entre utilisateurs
4. **Calendrier & Planification** : Horaires de cours et événements
5. **Application Mobile** : Application mobile native pour meilleure accessibilité
6. **Notifications** : Alertes en temps réel pour événements importants
7. **Soumission de Devoirs** : Gestion en ligne des devoirs
8. **Forums de Discussion** : Forums de discussion spécifiques aux cours
9. **Développement d'API** : API RESTful pour intégrations
10. **Reporting** : Analyses et rapports avancés

### Idées d'Amélioration UI
1. **Refonte du Tableau de Bord** : Tableaux de bord plus intuitifs et riches en données
2. **Mode Sombre** : Option de schéma de couleur alternative
3. **Thèmes Personnalisables** : Préférences visuelles sélectionnées par l'utilisateur
4. **Améliorations Responsives** : Meilleure compatibilité pour petits écrans
5. **Améliorations d'Accessibilité** : Fonctionnalités conformes aux WCAG

### Considérations de Déploiement
1. **Conteneurisation** : Déploiement Docker pour un scaling plus facile
2. **Pipeline CI/CD** : Tests et déploiement automatisés
3. **Migration vers le Cloud** : Passage à une infrastructure cloud
4. **Équilibrage de Charge** : Gestion du trafic utilisateur accru
5. **Systèmes de Sauvegarde** : Sauvegarde et récupération automatisées des données

---

*Ce rapport a été généré le 23 avril 2025 pour le Système de Gestion Scolaire Bawabati.*